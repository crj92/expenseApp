bkp.. contains code for auto expand search and cancel button search
//
//  ViewController.swift
//  taskEXpenseApp
//
//  Created by Raj Shekhar on 4/17/17.
//  Copyright Â© 2017 Raj Shekhar. All rights reserved.
//

import UIKit
import RealmSwift

class ExpenseListViewController: UIViewController, UITableViewDelegate {

@IBOutlet weak var btnMenu: UIBarButtonItem!
@IBOutlet weak var tblView: UITableView!

@IBOutlet weak var searchBar: UISearchBar!

//    var results = [NewExpense]()
var expenselists : List<NewExpense>?
var currentCreateAction:UIAlertAction!
var firstTime: Bool? = true
var selectedIndexPath:IndexPath? = nil
let userLogged = User()
var firstDateChosen : NSDate?
var secondDateChosen : NSDate?
// declare as property
//    var searchBar: UISearchBar!//custom search bar




override func viewDidLoad() {
super.viewDidLoad()
self.hideKeyboardWhenTappedAround()

userLogged.userName = userLoggedId





//reveal
if self.revealViewController() != nil {
btnMenu.target = self.revealViewController()
btnMenu.action = #selector(SWRevealViewController.revealToggle(_:))
self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())
}

//        searchBar.showsCancelButton = true
//        searchBar.delegate = self

// in viewDidLoad //search bar
//        searchBar = UISearchBar(frame: CGRect(x: 0.0, y: -80.0, width: 320.0, height: 44.0)) //(frame: CGRectMake(0.0, -80.0, 320.0, 44.0))
//        navigationController?.navigationBar.addSubview(searchBar)

// todismiss key board when cencel clicked in search bar







}

//    @IBAction func searchExpense(_ sender: Any) {
//
//        // in action to show // search bar expands
//        searchBar.frame = CGRect(x: 0.0, y : 0, width : 320,height :  44)
//    }
override func viewDidAppear(_ animated: Bool) {
super.viewDidAppear(animated)

NotificationCenter.default.addObserver(forName: .UIContentSizeCategoryDidChange, object: .none, queue: OperationQueue.main) { [weak self] _ in
//            self?.tblView.reloadData()
}
}
override func viewWillDisappear(_ animated: Bool) {

// in viewWillDisappear// search bar goes off
//        searchBar.removeFromSuperview()
}

override func viewWillAppear(_ animated: Bool) {
//        expenselists = readTasksAndUpdateUI(firstDateChosen,secondDateChosen)
tblView.dataSource = self
tblView.delegate = self
tblView.rowHeight = UITableViewAutomaticDimension
tblView.estimatedRowHeight = 140
navigationItem.backBarButtonItem?.tintColor = UIColor.green
print("dir","\(NewExpense.DocumentsDirectory)")
expenselists = loadAllExpenseList()
self.tblView.tableFooterView = UIView()//
self.tblView.reloadData()
//hide back button here
navigationItem.hidesBackButton = true


}

@IBAction func filterExpense(_ sender: Any) {
//        expenselists = readTasksAndUpdateUI(NSDate(),NSDate())
}

@IBAction func clearFilterResult(_ sender: Any) {
expenselists = loadAllExpenseList()
self.tblView.reloadData()


}
func loadAllExpenseList() -> List<NewExpense>{
if expenselists?.count != 0{
expenselists?.removeAll()
}
let theUser = dbRealm.objects(User.self).filter("userName == %@", userLogged.userName)//.first?.userExpenseList.filter("dateCreated == 2017-05-15 16:29:12 +0000")
//        if(firstDate.compare(NSDate(). as Date) == .orderedSame){
for eachExpense in theUser{
userLogged.userExpenseList.append(objectsIn: eachExpense.userExpenseList)
}
return   userLogged.userExpenseList

}

func loadFilteredExpenseList(_ firstDate: NSDate, _ secondDate: NSDate) -> List<NewExpense>{
if expenselists?.count != 0{
expenselists?.removeAll()
}
let theUser = dbRealm.objects(User.self).filter("userName == %@", userLogged.userName)
let nsPredicateForDate = NSPredicate(format: "dateCreated BETWEEN %@", [firstDate, secondDate])//NSPredicate(format: "dateCreated < %@", NSDate())

for expenselist in theUser{
for eachExpense in expenselist.userExpenseList.filter(nsPredicateForDate)//("dateCreated == \(Date())")
{
self.expenselists?.append(eachExpense)
}
//            userLogged.userExpenseList.append(objectsIn: eachExpense.userExpenseList)
}

print("------hey------",userLogged.userExpenseList)
return   userLogged.userExpenseList
//        self.tblView.setEditing(false, animated: true)
}
//segue
override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
if let destination = segue.destination as? ExpenseDetailViewController ,
let indexPath = tblView.indexPathForSelectedRow {
destination.selectedExpense = expenselists![indexPath.row]
}
if let destination = segue.destination as? DateFilterViewController{
destination.expenseListTablevc = self
}
}
}

extension ExpenseListViewController: UITableViewDataSource{

func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
print("count",expenselists!.count)
return expenselists!.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tblView.dequeueReusableCell(withIdentifier: "Cell") as! NewExpenseTableViewCell
let list = expenselists![indexPath.row]
//        print("this is list",list)
//        cell?.textLabel?.text = String(list.moneySpent)

//        if firstTime!  {
//            cell.accessoryType = .checkmark
//            //            cell.accessoryType = UITableViewCellAccessoryCheckmark
//        }
//        cell.textLabel?.text = String(describing: list.tempList)
cell.lblTitle.text = list.eventTitle
cell.lblTotalMoneySpent.text = String(list.totalMoneySpent)

//        cell.selectionStyle = .none
//        if let _ = selectedIndexPath {
//            if (indexPath.compare(selectedIndexPath!) == .orderedSame) {
//                if cell.accessoryType == .checkmark {
//                    cell.accessoryType = .none
//                } else {
//                    cell.accessoryType = .checkmark
//                }
//            }
//        }

return cell
}
}
// note here i have changed     var expenselists : List<NewExpense>! to     var expenselists : List<NewExpense>? beacause to chk if already expense list has some value remove it while calling readTasksAndUpdateUI(), it was duplicating already present data in expenselist table.

//extension ExpenseListViewController : UISearchBarDelegate {
//
//    //remove keyboard as search goes off
//    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
//        // Do some search stuff
//    }
//
//    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
//        // Stop doing the search stuff
//        // and clear the text in the search bar
//        searchBar.text = ""
//        // Hide the cancel button
//        searchBar.showsCancelButton = false
//        // You could also change the position, frame etc of the searchBar
//    }
//}
